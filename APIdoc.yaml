openapi: 3.0.0
info:
  title: Board Game REST API
  version: 1.0.0
servers:
  - url: http://213.162.241.203:5000
    description: Official server on the day of writing this API doc
  - url: http://localhost:5000
    description: Local server
paths:
  /create/playerID:
    get:
      summary: Create a new player ID
      description: Create a new player ID. A player ID is needed to be able to interact with the server when playing the game!
      responses:
        200:
          description: The new player ID
          content:
            text/plain:
              schema:
                type: integer
        500:
          description: Internal server error, with error message
          content:
            text/plain:
              schema:
                type: string
  /create/game:
    post:
      summary: Create a new game
      description: Create a new game. Make sure that you fill out a player (you have to make one in order to make a game) struct with a name and the unique id you got from `/create/playerID`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGameInfo"
      responses:
        200:
          description: The new game state. Keep in mind that this game state will be in the lobby mode (is_lobby=true)).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameState"
        500:
          description: Internal server error, with error message
          content:
            text/plain:
              schema:
                type: string
  /games/game/{id}:
    get:
      summary: Get the game state
      description: Get the game state. This can be smart to call frequently to get the update of the game you are in.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The game ID
      responses:
        200:
          description: The game state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameState"
        500:
          description: Internal server error, with error message
          content:
            text/plain:
              schema:
                type: string
  /games/input:
    post:
      summary: Handle player input on the server
      description: |
        Handles a player input on the server. This is the API call you want to use to handle the input from the player.
        
        The player input struct has to be used correctly, and it can be a bit confusing how it works.
        The essence of it is that the server looks at what the input type (see `PlayerInputType`) is and checks certain parts of the input for the values it needs to handle the chosen input type.
        The server expects the following (optional/nullable) values to be set for each PlayerInputType (`PlayerInputType` -> `PlayerInputStructVariable` // Comment when necessary):
        - `Movement` -> `related_node_id`
        - `ChangeRole` -> `related_role_id`
        - `All` -> // Should never be used, as it's a server side enum. It does nothing for the client.
        - `NextTurn` -> // Nothing
        - `UndoAction` -> // Nothing
        - `ModifyDistrict` -> `district_modifier`
        - `StartGame` -> // Nothing
        - `AssignSituationCard` -> `situation_card_id`
        - `LeaveGame` -> // Nothing
        - `ModifyEdgeRestriction` -> `edge_modifier`
        - `SetPlayerBusBool` -> `related_bool`
        
        Make sure that you know which values can be null and not by looking at the `PlayerInput` schema in the schema section. The server will also return an error if it's missing something in the `PlayerInput` struct.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerInput"
      responses:
        200:
          description: The new game state with the player input handled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameState"
        500:
          description: Internal server error, with error message
          content:
            text/plain:
              schema:
                type: string
  /games/lobbies:
    get:
      summary: Gets the lobbies
      description: Gets all the games that can be joined (defined by is_lobby=true)
      responses:
        200:
          description: All the open lobbies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyList"
        500:
          description: Internal server error, with error message
          content:
            text/plain:
              schema:
                type: string
  /games/join/{game_id}:
    post:
      summary: Join a game
      description: Join a game with the ID specified
      parameters:
        - in: path
          name: game_id
          schema:
            type: integer
          required: true
          description: The game ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"
      responses:
        200:
          description: The game state of the game you joined
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameState"
        500:
          description: Internal server error, with error message
          content:
            text/plain:
              schema:
                type: string
  /resources/situationcards:
    get:
      summary: Returns a list of every situation card
      description: Returns a list of every situation card
      responses:
        200:
          description: List of every situation card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SituationCardListStruct"
  /check-in/{player_id}:
    get:
      summary: Let's the server know that the player_id is still used
      description: Let's the server know that the player_id is still used. This is important to use often, because if not, the player with the given id will be removed from any game used. It can be smart to do checkins every few seconds. At the time of writing this API doc, it takes 90 seconds before a player is removed due to inactivity/not checking in.
      parameters:
        - in: path
          name: player_id
          schema:
            type: integer
          required: true
          description: The ID of the player
      responses:
        200:
          description: The player_id was checked in.
        500:
          description: Internal server error, with error message. This will also happen if the player is removed from the server due to inactivity/not checking in in time.
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
    InGameID:
      type: string
      enum:
        - Undecided
        - PlayerOne
        - PlayerTwo
        - PlayerThree
        - PlayerFour
        - PlayerFive
        - PlayerSix
        - Orchestrator
    Traffic:
      type: string
      enum:
        - LevelOne
        - LevelTwo
        - LevelThree
        - LevelFour
        - LevelFive
    PlayerInputType:
      type: string
      enum:
        - Movement
        - ChangeRole
        - All
        - NextTurn
        - UndoAction
        - ModifyDistrict
        - StartGame
        - AssignSituationCard
        - LeaveGame
        - ModifyEdgeRestrictions
        - SetPlayerBusBool
    District:
      type: string
      enum:
        - IndustryPark
        - Port
        - Suburbs
        - RingRoad
        - CityCentre
        - Airport
    RestrictionType:
      type: string
      enum:
        - ParkAndRide
        - Electric
        - Emergency
        - Hazard
        - Destination
        - Heavy
        - OneWay
    DistrictModifierType:
      type: string
      enum:
        - Access
        - Priority
        - Toll
    TypeEntitiesToTransport:
      type: string
      enum:
        - People
        - Packages
    GameState:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        players:
          type: array
          items:
            $ref: "#/components/schemas/Player"
        is_lobby:
          type: boolean
        current_players_turn:
          $ref: "#/components/schemas/InGameID"
        district_modifiers:
          type: array
          items:
            $ref: "#/components/schemas/DistrictModifier"
        situation_card:
          $ref: "#/components/schemas/SituationCard"
        edge_restrictions:
          type: array
          items:
            $ref: "#/components/schemas/EdgeRestriction"
        legal_nodes:
          type: array
          items:
            type: integer
    EdgeRestriction:
      type: object
      properties:
        node_one:
          type: integer
        node_two:
          type: integer
        edge_restriction:
          $ref: "#/components/schemas/RestrictionType"
        delete:
          type: boolean
    Player:
      type: object
      properties:
        connected_game_id:
          type: integer
          nullable: true
        in_game_id:
          $ref: "#/components/schemas/InGameID"
        unique_id:
          type: integer
        name:
          type: string
        position_node_id:
          type: integer
          nullable: true
        remaining_moves:
          type: integer
        objective_card:
          $ref: "#/components/schemas/PlayerObjectiveCard"
        is_bus:
          type: boolean
    Node:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        is_connected_to_rail:
          type: boolean
        is_parking_spot:
          type: boolean
    NewGameInfo:
      type: object
      properties:
        host:
          $ref: "#/components/schemas/Player"
        name:
          type: string
    PlayerInput:
      type: object
      properties:
        player_id:
          type: integer
        game_id:
          type: integer
        input_type:
          $ref: "#/components/schemas/PlayerInputType"
        related_role:
          $ref: "#/components/schemas/InGameID"
          nullable: true
        related_node_id:
          type: integer
          nullable: true
        district_modifier:
          $ref: "#/components/schemas/DistrictModifier"
          nullable: true
        situation_card_id:
          type: integer
          nullable: true
        edge_modifier:
          $ref: "#/components/schemas/EdgeRestriction"
          nullable: true
        related_bool:
          type: boolean
          nullable: true
    DistrictModifier:
      type: object
      properties:
        district:
          $ref: "#/components/schemas/District"
        modifier:
          $ref: "#/components/schemas/DistrictModifierType"
        vehicle_type:
          $ref: "#/components/schemas/RestrictionType"
          nullable: true
        associated_movement_value:
          type: integer
        associated_money_value:
          type: integer
        delete:
          type: boolean
    PlayerObjectiveCard:
      type: object
      properties:
        name:
          type: string
        start_node_id:
          type: integer
        pick_up_node_id:
          type: integer
        drop_off_node_id:
          type: integer
        special_vehicle_types:
          type: array
          items:
            $ref: "#/components/schemas/RestrictionType"
        picked_package_up:
          type: boolean
        dropped_package_off:
          type: boolean
        type_of_entities_to_transport:
          $ref: "#/components/schemas/TypeEntitiesToTransport"
        amount_of_entities:
          type: integer
    CostTuple:
      type: object
      properties:
        neighbourhood:
          $ref: "#/components/schemas/District"
        traffic:
          $ref: "#/components/schemas/Traffic"
    SituationCard:
      type: object
      properties:
        card_id:
          type: integer
        title:
          type: string
        description:
          type: string
        goal:
          type: string
        costs:
          type: array
          items:
            $ref: "#/components/schemas/CostTuple"
        objective_cards:
          type: array
          items:
            $ref: "#/components/schemas/PlayerObjectiveCard"
    SituationCardListStruct:
      type: object
      properties:
        situation_card_list:
          type: array
          items:
            $ref: "#/components/schemas/SituationCard"
    LobbyList:
      type: object
      properties:
        lobbies:
          type: array
          items:
            $ref: "#/components/schemas/GameState"
